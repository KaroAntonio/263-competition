import time, math, sys

def dependency(lines):
    n = lines[0][0] # num packages
    m = lines[0][1] # num rules
    # Build Tree
    C = {} #children

    for l in lines[1:-1]:
        # Set Children
        # mapping dependent integers to their list of depended on integers
        C[int(l[0])] = [ int(c) for c in l[2:]]

    print("Children!")
    print(C)
    
    # Find nodes that are not dependent on other nodes
    free_nodes = {i:0 for i in range(1,int(n)+1)}
    for p in C:
        if p in free_nodes:
            del free_nodes[p]
    print("Reprinting free nodes!")
    print(free_nodes)

    output = []
    starter = 1
    keys = free_nodes.keys()
    t = int(n)
    checker = 0

    # Starter only looks at each node
    while starter < (t+1) and len(output) < t:
        if starter not in output:
            if starter in keys:
                output.append(starter)
                starter = 1
            else:
                # Checking if all depended on nodes are in output
                for i in C.get(starter):
                    if i in output:
                        checker = checker + 1
                if checker == len(C.get(starter)):
                    output.append(starter)
                    starter = 1
                else:
                    starter = starter + 1

                # Resting checker for next node
                checker = 0

        else:
            starter = starter + 1

    return output

def test():
    problems = [
    """
    5 4
    3 2 1 5
    2 2 5 3
    4 1 3
    5 1 1
    1 5 3 2 4
    """,
    """
    9 4
    1 4 5 4 3 2
    4 1 6
    5 1 9
    3 1 7
    2 6 4 7 3 8 9 5 1
    """,
    """
    100 94
1 32 4 5 9 12 16 20 21 23 29 30 36 43 44 45 46 47 48 50 53 54 55 59 60 63 64 70 72 83 85 89 93 95 
2 32 7 9 12 15 17 25 26 27 29 35 40 41 44 45 46 50 51 52 54 56 59 64 69 78 80 82 83 86 88 94 98 100 
3 25 9 11 18 26 34 38 40 55 60 61 63 66 68 69 70 71 73 83 84 85 88 89 92 94 96 
4 30 8 9 11 15 17 21 24 26 28 29 31 35 38 42 43 48 51 58 61 67 71 75 79 81 83 89 91 93 94 97 
5 21 6 22 23 41 44 45 47 50 58 59 60 61 76 78 81 83 89 92 95 96 100 
6 33 14 15 16 19 21 24 28 30 32 33 34 35 45 46 47 51 52 53 54 61 62 69 71 72 74 76 80 83 84 85 87 89 91 
7 19 14 24 32 35 37 39 44 45 48 55 57 72 73 75 83 84 93 94 97 
8 26 11 14 18 19 23 25 26 32 37 49 51 53 55 58 63 65 71 74 77 79 90 91 93 95 97 98 
9 22 19 21 25 26 29 37 39 42 45 52 56 61 62 65 68 69 85 87 88 96 97 100 
10 34 13 14 15 20 22 28 30 31 34 36 38 46 54 59 60 61 66 68 69 71 73 76 78 82 83 85 88 92 93 94 97 98 99 100 
11 22 13 21 28 40 45 46 51 57 59 66 69 72 73 76 77 81 84 90 93 95 96 100 
12 28 13 18 27 28 32 33 35 38 48 52 54 56 57 59 64 67 72 75 76 79 82 84 88 90 92 96 98 100 
13 33 14 15 16 20 21 25 26 29 30 31 32 34 35 44 46 48 54 58 59 60 61 66 69 70 78 80 83 87 88 92 93 94 95 
14 21 17 18 22 30 37 38 40 44 47 51 56 57 61 62 69 82 85 89 91 99 100 
15 30 18 19 20 23 26 28 29 31 33 36 59 60 61 65 68 72 73 76 80 81 82 83 85 86 87 89 91 94 98 99 
16 21 17 22 25 33 34 38 41 43 46 47 49 61 63 64 65 66 70 75 97 98 99 
17 24 18 27 31 32 33 34 35 37 42 45 46 47 49 53 55 65 70 78 79 81 84 85 91 92 
18 21 20 23 26 28 30 31 32 44 51 53 56 62 70 74 85 87 93 95 96 99 100 
19 25 22 23 27 28 30 31 35 36 50 51 56 65 68 71 72 74 77 78 80 82 91 92 95 99 100 
20 24 22 25 27 30 32 33 39 41 45 47 50 53 59 61 63 64 65 66 70 73 79 83 88 92 
21 26 24 29 32 38 40 41 42 44 49 51 52 54 57 58 68 72 76 78 83 86 87 89 92 94 95 97 
22 25 23 27 28 29 32 39 42 43 45 47 50 51 55 61 62 71 73 74 75 76 82 90 96 99 100 
23 18 25 28 35 37 38 40 44 45 54 55 62 70 75 79 81 82 85 87 
24 19 27 35 51 55 60 61 63 66 74 75 80 81 82 83 85 86 89 93 97 
25 24 26 36 45 52 56 57 58 60 61 63 66 68 75 79 82 86 89 90 92 94 95 96 97 98 
26 20 28 29 36 37 40 52 55 56 63 65 66 67 68 69 70 71 75 83 90 95 
27 18 33 34 40 44 46 49 51 64 65 67 68 69 72 87 89 95 96 99 
28 22 31 33 36 37 41 43 48 51 55 56 57 60 68 76 77 78 80 86 88 90 91 97 
29 25 30 34 39 40 44 48 49 51 54 61 68 69 73 74 75 76 78 79 84 87 89 92 93 94 95 
30 21 31 34 36 39 41 45 49 52 55 56 57 63 64 65 67 75 81 83 85 91 99 
31 19 32 48 52 64 65 66 70 71 72 73 76 77 80 81 84 87 95 96 99 
32 17 39 43 46 47 48 51 55 64 67 68 76 77 80 88 90 91 96 
33 26 34 36 37 38 43 44 45 47 56 57 59 62 69 72 73 75 79 83 84 85 91 93 94 98 99 100 
34 17 36 37 42 44 45 49 54 57 61 64 70 79 83 88 91 96 99 
35 14 37 51 52 54 55 56 63 67 71 80 81 84 90 91 
36 13 48 52 57 58 65 67 71 75 80 81 93 94 99 
37 26 41 44 46 47 49 50 53 54 56 59 66 69 71 72 75 78 79 80 81 86 89 93 95 97 98 100 
38 19 44 46 47 50 55 57 60 61 69 74 75 77 80 81 83 86 90 92 97 
39 19 45 48 49 50 51 52 53 55 61 69 75 76 82 83 88 89 92 94 97 
40 23 42 45 48 49 51 55 56 57 58 62 68 74 75 79 80 81 82 83 84 85 89 92 100 
41 14 52 53 59 64 66 68 69 77 81 85 86 88 92 93 
42 15 44 48 54 55 56 59 64 72 73 77 83 84 92 93 97 
43 14 44 51 54 55 57 62 64 65 67 69 76 78 88 95 
44 12 46 48 49 50 52 55 71 80 85 92 96 97 
45 20 48 49 51 52 55 57 59 61 62 71 73 74 77 78 81 84 85 92 96 97 
46 17 48 49 53 57 59 62 64 71 72 79 81 86 90 93 94 95 100 
47 18 49 53 63 64 65 69 70 73 81 82 84 86 90 91 92 93 95 99 
48 19 49 52 53 58 61 65 70 73 81 83 84 85 86 88 90 92 94 96 97 
49 14 56 70 71 72 73 74 80 81 82 84 85 86 87 89 
50 17 54 62 63 64 65 66 67 71 77 80 83 86 87 90 91 95 98 
51 14 53 55 58 63 68 74 75 78 82 87 89 90 92 96 
52 9 61 63 66 70 71 73 78 82 83 
53 12 56 65 67 71 79 80 85 92 96 97 98 99 
54 14 57 58 60 64 70 72 77 78 79 80 82 94 95 98 
55 13 57 58 64 66 73 74 79 85 86 88 90 92 94 
56 12 57 59 60 64 66 69 87 89 90 92 94 100 
57 9 60 81 89 90 93 94 97 98 100 
58 17 60 63 67 68 70 71 73 75 78 79 80 85 86 88 90 91 95 
59 9 60 64 70 71 73 83 87 97 100 
60 17 65 66 67 71 72 73 76 78 80 82 84 87 88 92 95 96 98 
61 9 62 76 77 84 85 87 93 94 100 
62 10 68 70 74 77 81 82 88 89 96 98 
63 9 65 69 73 76 82 83 89 90 97 
64 9 70 77 78 81 82 83 85 91 100 
65 12 68 71 75 76 80 83 84 85 88 94 97 100 
66 15 67 70 75 77 78 80 81 83 85 86 88 91 94 98 99 
67 12 73 74 77 78 80 82 85 90 92 93 95 96 
68 13 70 71 72 73 74 75 77 79 81 84 87 90 97 
69 5 78 80 88 95 99 
70 8 75 76 78 82 84 92 97 100 
71 9 73 75 79 82 83 90 93 97 99 
72 9 74 75 78 79 81 83 87 92 96 
73 7 79 80 81 83 93 94 97 
74 4 85 90 91 98 
75 4 77 82 88 97 
76 6 81 90 91 94 96 99 
77 10 78 81 85 86 88 90 91 92 98 99 
78 10 80 86 87 91 93 94 95 96 98 100 
79 6 80 83 85 90 97 98 
80 10 86 88 90 91 92 93 95 96 97 99 
81 7 82 83 84 88 89 94 100 
82 5 90 92 93 96 99 
83 6 88 89 91 97 98 99 
84 7 85 86 87 89 93 95 96 
85 4 87 88 92 98 
87 5 88 89 91 96 97 
88 4 90 92 95 96 
89 6 91 92 96 97 98 99 
90 2 92 95 
91 4 93 94 96 97 
93 2 99 100 
94 3 95 98 100 
97 2 98 99 
86 2 90 96
92 95 90 96 86 88 98 99 97 100 93 82 94 91 80 89 83 87 78 69 85 74 79 84 81 73 76 77 67 75 70 64 66 71 72 68 62 61 65 60 57 59 56 49 53 63 47 52 41 58 48 36 46 54 50 55 44 37 38 42 51 35 43 45 34 33 39 32 31 28 30 40 27 24 29 21 26 25 23 22 19 9 20 18 15 17 14 7 16 6 5 13 10 11 3 8 4 12 1 2
    """
    ]
    time_limit = 3.
    times = []
    for p in problems:
        p = [line.strip().split() for line in p.split('\n')][1:-1]
        start = time.clock()
        sol = dependency(p)
        #if sol != " ".join(p[-1]):
        print("Result: ")
        print(sol)
        print("Solution: ")
        print(" ".join(p[-1]))

            #assert(sol == p[-1])

        end = time.clock()
        t = end-start
        times += [t]
        if t > time_limit:
            print (t, p)

    if all([t< time_limit for t in times]):
        print(times)
        print("All Solved within " + str(time_limit) + "s")

if __name__ == "__main__":
	test()
